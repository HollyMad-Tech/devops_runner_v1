name: CI Gates (merge-only-if-green)

on:
  pull_request:
    branches: [ "**" ]
  push:
    branches: [ "main", "master" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  CI_STRICT: ${{ vars.CI_STRICT || 'false' }}
  ARTIFACTS_DIR: artifacts
  METRICS_DIR: artifacts/metrics
  LOGS_DIR: artifacts/logs
  AUDIT_DIR: artifacts/audit
  INCIDENTS_DIR: memory/incidents/${{ github.run_id }}_${{ github.run_attempt }}
  APP_BASE_URL: ${{ vars.APP_BASE_URL || 'http://127.0.0.1:8765' }}
  BUILD_DOCKER: ${{ vars.BUILD_DOCKER || 'false' }}

jobs:
  lint:
    name: Lint (format/static checks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps (if present)
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi

      - name: Setup Node (if package.json exists)
        if: hashFiles('**/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: npm ci (if Node project)
        if: hashFiles('**/package.json') != ''
        run: npm ci

      - name: Lint
        run: bash ci/scripts/run_lint.sh

      - name: Upload lint logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-lint
          path: ${{ env.LOGS_DIR }}/lint/**

  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps (if present)
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi
          if [ -f "pyproject.toml" ]; then pip install .; fi

      - name: Run pytest (if tests exist)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${LOGS_DIR}/unit"
          if compgen -G "tests/**/*.py" > /dev/null || compgen -G "tests/*.py" > /dev/null || compgen -G "test_*.py" > /dev/null; then
            pytest -q 2>&1 | tee "${LOGS_DIR}/unit/pytest.out"
          else
            echo "No Python tests found." | tee "${LOGS_DIR}/unit/pytest.out"
            if [ "${CI_STRICT}" = "true" ]; then
              echo "CI_STRICT=true -> failing due to missing tests."
              exit 1
            fi
          fi

      - name: Upload unit logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-unit
          path: ${{ env.LOGS_DIR }}/unit/**

  contracts:
    name: Contract tests (/plan, /exec, tool schemas)
    runs-on: ubuntu-latest
    needs: [unit]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi

      - name: Contract tests
        run: bash ci/scripts/contracts.sh

      - name: Upload contract logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-contracts
          path: ${{ env.LOGS_DIR }}/contracts/**

  e2e:
    name: E2E smokes (RB v1 + DevOps Runner v1)
    runs-on: ubuntu-latest
    needs: [contracts]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi
          if [ -f "pyproject.toml" ]; then pip install .; fi

      - name: Run E2E smokes
        run: bash ci/scripts/smoke.sh

      - name: Collect audit bundle (if any)
        shell: bash
        run: |
          mkdir -p "${AUDIT_DIR}"
          if [ -d "devops_runner/audit" ]; then
            cp -r devops_runner/audit/* "${AUDIT_DIR}/" || true
          fi
          if compgen -G "**/audit/*" > /dev/null; then
            find . -type d -name "audit" -maxdepth 3 -print -exec cp -r {} "${AUDIT_DIR}/" \; || true
          fi
          touch "${AUDIT_DIR}/.keep"

      - name: Upload audit bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-bundle
          path: ${{ env.AUDIT_DIR }}/**

  canary:
    name: Canary suite
    runs-on: ubuntu-latest
    needs: [e2e]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi

      - name: Run canaries
        run: bash ci/scripts/canary.sh

      - name: Upload canary logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-canary
          path: ${{ env.LOGS_DIR }}/canary/**

  bundle:
    name: Bundle incidents & artifacts
    runs-on: ubuntu-latest
    needs: [lint, unit, contracts, e2e, canary]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Prepare incident directory
        shell: bash
        run: |
          mkdir -p "${INCIDENTS_DIR}"
          mkdir -p "${ARTIFACTS_DIR}"
          mkdir -p "${METRICS_DIR}"
          mkdir -p "${LOGS_DIR}"

      - name: Copy logs/metrics/audit into incident dir on failure
        if: failure()
        shell: bash
        run: |
          echo "Failure detected; writing incident bundle..."
          mkdir -p "${INCIDENTS_DIR}"
          rsync -a "${LOGS_DIR}/" "${INCIDENTS_DIR}/logs/" 2>/dev/null || true
          rsync -a "${METRICS_DIR}/" "${INCIDENTS_DIR}/metrics/" 2>/dev/null || true
          rsync -a "${AUDIT_DIR}/" "${INCIDENTS_DIR}/audit/" 2>/dev/null || true
          date -u +"%Y-%m-%dT%H:%M:%SZ" > "${INCIDENTS_DIR}/timestamp.txt"

      - name: Upload incident bundle (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: incident-bundle
          path: ${{ env.INCIDENTS_DIR }}/**

  kpi:
    name: KPI summary
    runs-on: ubuntu-latest
    needs: [lint, unit, contracts, e2e, canary, bundle]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: KPI summary
        run: |
          python ci/scripts/kpi_summary.py --metrics-dir "${METRICS_DIR}" --out "${METRICS_DIR}/kpi_summary.txt"
          echo "----- KPI SUMMARY -----"
          cat "${METRICS_DIR}/kpi_summary.txt" || true

      - name: Upload KPI summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kpi-summary
          path: ${{ env.METRICS_DIR }}/kpi_summary.txt

  require-statuss-check-before-mergiing:
    name: require statuss check before mergiing
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [lint, unit, contracts, e2e, canary]   # შეცვალე, თუ შენი job-id-ები განსხვავდება
    steps:
      - run: echo "ok"
